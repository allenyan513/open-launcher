// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../generated/client"
}

enum SubscriptionTier {
  free
  pro
}

enum OrderStatus {
  pending
  completed
}

enum PaymentStatus {
  pending
  paid
  unpaid
  no_payment_required
}

enum ProductStatus {
  pending
  reviewing
  rejected
  approved
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  name             String?
  avatarUrl        String?
  bio              String?
  website          String?
  twitter          String?
  github           String?
  linkedin         String?
  facebook         String?
  instagram        String?
  youtube          String?
  tiktok           String?
  pinterest        String?
  subscriptionTier SubscriptionTier @default(free)
  balance          Decimal          @default(0.00) @db.Decimal(10, 2)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  accounts         Account[]
  orders           Order[]
  products         Product[]
  productVotes     ProductVote[]
}

model Account {
  id                String   @id @default(uuid())
  provider          String
  providerAccountId String
  userId            String
  accessToken       String?
  refreshToken      String?
  expiresIn         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Order {
  id            String        @id @default(uuid())
  sessionId     String        @unique
  userId        String
  productId     String        @default("")
  product       Json          @default("{}")
  priceId       String        @default("")
  price         Json          @default("{}")
  paymentStatus PaymentStatus @default(pending)
  orderStatus   OrderStatus   @default(pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
}

model PaymentEvent {
  id        String @id @default(uuid())
  evnetId   String @unique
  eventType String
  data      Json
}

model Product {
  id                String            @id @default(uuid())
  name              String            @unique
  slug              String            @unique
  userId            String
  url               String            @default("")
  status            ProductStatus     @default(pending)
  icon              String            @default("")
  screenshots       String[]          @default([])
  featured          Boolean           @default(false)
  voteCount         Int               @default(0)
  tagline           String            @default("")
  description       String            @default("")
  longDescription   String?
  features          String?
  useCase           String?
  howToUse          String?
  faq               String?
  socialLinks       String[]          @default([])
  launchDate        DateTime          @default(now())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  productCategories ProductCategory[] @relation("ProductCategories")
  productContents   ProductContent[]
  productVotes      ProductVote[]
}

model ProductVote {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model ProductContent {
  id              String   @id @default(uuid())
  productId       String
  language        String
  tagline         String?
  description     String?
  longDescription String?
  features        String?
  useCase         String?
  howToUse        String?
  faq             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, language])
}

model ProductCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  group       String
  whoToUse    String?
  howItWork   String?
  advantages  String?
  description String?
  faqs        String?
  features    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[] @relation("ProductCategories")
}
